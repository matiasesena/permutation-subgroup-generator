import sys

def getGenerator():
    generator = list()
    print("INPUT\n[1/2] Enter the LENGTH of the Group of Permutations. - e.g. N = 5\n\n")

    print("[2/2] Enter the GENERATOR you want to use to calculate the subgroup - e.g. (132)(45)")
    #generator.extend([3,1,2,5,4,7,9,6,8])  # (132)(45)(6798)
    generator.extend([3,1,2,5,4])  # (132)(45)
    #generator.extend([1,2,3,4,5])  # (1)(2)(3)(4)(5)
    #generator.extend([1,3,2,4,5])  # (1)(23)(4)(5)
    #generator.extend([5,4,3,2,1])   # (15)(24)(3)
    #generator.extend([2,4,5,1,3])   # (124)(35)
    print("Subgrupo generado por {}".format(imprimirElemento(generador)))
    numbers = list()
    for i in range(0,len(generador)):
        numbers.append(i+1)
    print("Generator = {}".format(numbers))
    print("            {}".format(generador))
    print("Length = {}".format(len(generador)))
    return generador

def permutar(generador, permutado):
    resultado = list()
    for i in range(0,len(generador)):
        resultado.append(permutado[generador[i]-1])
    return resultado

def chequearIdentidad(elemento):
    count = 1
    for numero in elemento:
        if numero == count:
            count = count+1
        else:
            return False
    return True

def generateSubGroup(generador):
    subGrupo = list()
    identidad = 0
    permutado = generador
    count = 2
    print("\nP^1 = {}".format(generador))
    print(imprimirElemento(generador))
    subGrupo.append(permutado)
    while identidad == 0:
        permutado = permutar(generador, permutado)
        print("P^{} = {}".format(count,permutado))
        formateado = imprimirElemento(permutado)
        print(formateado)
        subGrupo.append(permutado)
        if chequearIdentidad(permutado):
            identidad = 1
        count = count+1
    return subGrupo

def imprimirElemento(elemento):
    string = '('
    pos = 0
    proximoNumero = elemento[pos]
    done = list()
    not_done = list()
    for i in range(0,len(elemento)):
        not_done.append(i+1)
    done.append(pos+1)
    not_done.remove(pos+1)
    if proximoNumero == pos+1:
        string += str(elemento[pos]) + ')('
        pos = pos+1
    else:
        string += str(pos+1) + str(proximoNumero)
        not_done.remove(proximoNumero)
        done.append(proximoNumero)
        pos = proximoNumero-1
        proximoNumero = elemento[pos]
    proximoNumero = elemento[pos]
    while len(not_done) > 0:
        if proximoNumero in done:
            done.append(pos+1)
            if pos+1 in not_done:
                not_done.remove(pos+1)
            if len(not_done) != 0:
                if not string.endswith('('):
                    string += ')('
                pos = not_done[0]-1
                proximoNumero = elemento[pos]
            else:
                string += str(pos+1)
        else:
            if proximoNumero == pos+1:
                done.append(elemento[pos])
                not_done.remove(elemento[pos])
                if len(not_done) != 0:
                    string += str(elemento[pos]) + ')('
                    pos = pos+1
                else:
                    string += str(elemento[pos])
            else:
                if pos+1 in not_done:
                    string += str(pos+1)+str(proximoNumero)
                    done.append(pos+1)
                    not_done.remove(pos+1)
                else:
                    string += str(proximoNumero)
                done.append(proximoNumero)
                not_done.remove(proximoNumero)
                pos = proximoNumero-1
            if len(not_done) != 0:
                proximoNumero = elemento[pos]
    string += ')'
    return string

def writeOutput(subGroup):
    outputFile = open("output.txt","w+")
    print("Archivo creado satisfactoriamente.")
    print(subGroup)
    print(len(subGroup[0]))
    for i in range(0,len(subGroup)):
        if i == len(subGroup)-1:
            outputFile.write("P^{}\n".format(i+1))
        else:
            outputFile.write("P^{}\t".format(i+1))
    for i in range(0,len(subGroup[0])):
        for j in range(0,len(subGroup)):
            if j == len(subGroup)-1:
                outputFile.write("{}\n".format(subGroup[j][i]))
            else:
                outputFile.write("{} ->\t".format(subGroup[j][i]))

print("=======================\n    Criptography I\nSubgroup generator v1.0\n=======================\n")
print("ABSTRACT\nThis script calculates the subgroup generated by the permutation (generator) that you enter.\n")
print("DESCRIPTION\nGiven a set A, we note by S(A) as the Group of bijections of A in A with the composition.\nIf n >= 1 is a natural number, S(N) denotes the group of the bijections of the set {1,...,N} on itself. The elements of S(N) are called permutations.\n")
print("EXAMPLE OF USE\n\tInput: N = 5 and GENERATOR = 31254\n\t")

# Get the generator from user's input.
generador = getGenerator()

# Generate the subgroup generated by the permutation.
subGroup = generateSubGroup(generador)

# Ask the user if he wants to save the output in a file.
choice = raw_input('Do you want to save all the permutations in a file? Select Yes or No (Y/N): ')
if choice == 'y' or choice == 'Y':
    # Write the file with all the transitions.
    writeOutput(subGroup)

print("\nScript finished")
sys.exit(0)
